CREATE DATABASE todo_unas_master;
\c todo_unas_master;

CREATE TABLE roles (
    id_rol SERIAL PRIMARY KEY,
    nombre VARCHAR(50),
    status INT
);

CREATE TABLE usuario (
    id_usuario SERIAL PRIMARY KEY,
    nombre VARCHAR(50),
    apellido_paterno VARCHAR(50),
    apellido_materno VARCHAR(50),
    contrasena VARCHAR(100),
    correo VARCHAR(100),
    id_rol INT,
    status INT,
    FOREIGN KEY (id_rol) REFERENCES roles(id_rol)
);

CREATE TABLE privilegios (
    id_privilegio SERIAL PRIMARY KEY,
    nombre VARCHAR(50)
);

CREATE TABLE roles_privilegios (
    id_roles_privilegios SERIAL PRIMARY KEY,
    id_rol INT,
    id_privilegio INT,
    FOREIGN KEY (id_rol) REFERENCES roles(id_rol),
    FOREIGN KEY (id_privilegio) REFERENCES privilegios(id_privilegio)
);

CREATE TABLE usuario_rol (
    id_usuario_rol SERIAL PRIMARY KEY,
    id_usuario INT,
    id_rol INT,
    FOREIGN KEY (id_usuario) REFERENCES usuario(id_usuario),
    FOREIGN KEY (id_rol) REFERENCES roles(id_rol)
);

CREATE TABLE sucursales (
    id_sucursal SERIAL PRIMARY KEY,
    nombre VARCHAR(100),
    estado VARCHAR(50),
    fecha_actualizacion DATE,
    direccion VARCHAR(200),
    url VARCHAR(200),
    usuario_creador INT,
    fecha_creado DATE,
    usuario_modificador INT,
    fecha_modificado DATE,
    usuario_eliminador INT,
    fecha_eliminado DATE,
    url_imagen VARCHAR(200),
    status INT,
);

CREATE TABLE sucursales_hist (
    id_historico SERIAL PRIMARY KEY,
    id_sucursal INT,
    nombre VARCHAR(100),
    estado VARCHAR(50),
    fecha_actualizacion DATE,
    direccion VARCHAR(200),
    url VARCHAR(200),
    usuario_involucrado INT,
    tipo_accion VARCHAR(50),
    fecha DATE,
    url_imagen VARCHAR(200),
    status INT,
    FOREIGN KEY (id_sucursal) REFERENCES sucursales(id_sucursal)
);

CREATE TABLE catalogo_general (
    id_producto SERIAL PRIMARY KEY,
    clave VARCHAR(100),
    nombre VARCHAR(100),
    descripcion TEXT,
    cantidad_total INT,
    precio DECIMAL(10, 2),
    usuario_creador INT,
    fecha_creado DATE,
    usuario_modificador INT,
    fecha_modificado DATE,
    usuario_eliminador INT,
    fecha_eliminado DATE
);

CREATE TABLE catalogo_general_hist (
    id_historico SERIAL PRIMARY KEY,
    id_producto INT,
    nombre VARCHAR(100),
    descripcion TEXT,
    cantidad_total INT,
    precio DECIMAL(10, 2),
    usuario_involucrado INT,
    tipo_accion VARCHAR(50),
    fecha DATE,
    FOREIGN KEY (id_producto) REFERENCES catalogo_general(id_producto)
);

CREATE TABLE sincronizacion_pendiente (
    id_sync SERIAL PRIMARY KEY,
    id_producto INT,
    id_sucursal INT,
    fecha_registro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    estado VARCHAR(20),
    mensaje_error TEXT,
    FOREIGN KEY (id_producto) REFERENCES catalogo_general(id_producto),
    FOREIGN KEY (id_sucursal) REFERENCES sucursales(id_sucursal)
);

CREATE TABLE inventario (
    id_sucursal INT,
    id_producto INT,
    cantidad INT,
    PRIMARY KEY (id_sucursal, id_producto),
    FOREIGN KEY (id_sucursal) REFERENCES sucursales(id_sucursal),
    FOREIGN KEY (id_producto) REFERENCES catalogo_general(id_producto)
);

CREATE TABLE clinicas (
    id_clinica SERIAL PRIMARY KEY,
    nombre VARCHAR(100),
    direccion VARCHAR(200),
    status INT
);

CREATE TABLE catalogo_salidas (
    id_tipo_salida SERIAL PRIMARY KEY,
    tipo VARCHAR(100),
    status INT
);

CREATE TABLE movimientos (
    id_movimiento SERIAL PRIMARY KEY,
    id_usuario INT,
    tipo_movimiento VARCHAR(50),
    sucursal_salida INT,
    sucursal_destino INT,
    id_tipo_salida INT,
    id_clinica INT,
    fecha DATE,
    precio_total DECIMAL(10, 2),
    FOREIGN KEY (id_usuario) REFERENCES usuario(id_usuario),
    FOREIGN KEY (sucursal_salida) REFERENCES sucursales(id_sucursal),
    FOREIGN KEY (sucursal_destino) REFERENCES sucursales(id_sucursal),
    FOREIGN KEY (id_tipo_salida) REFERENCES catalogo_salidas(id_tipo_salida),
    FOREIGN KEY (id_clinica) REFERENCES clinicas(id_clinica)
);

CREATE TABLE detalle_movimiento (
    id_detalle_mov SERIAL PRIMARY KEY,
    id_movimiento INT,
    id_producto INT,
    cantidad INT,
    precio DECIMAL(10, 2),
    FOREIGN KEY (id_movimiento) REFERENCES movimientos(id_movimiento),
    FOREIGN KEY (id_producto) REFERENCES catalogo_general(id_producto)
);
--Inserts Demo
INSERT INTO privilegios (nombre) VALUES 
    ('Ver'),
    ('Editar');

INSERT INTO roles (nombre, id_privilegio) VALUES 
    ('Administrador', 1),
    ('Usuario', 2);

INSERT INTO roles_privilegios (id_rol, id_privilegio) VALUES 
    (1, 1),
    (2, 2);

INSERT INTO usuario (nombre, apellido_paterno, apellido_materno, contraseña, correo, id_rol) VALUES 
    ('Juan', 'Perez', 'Gomez', 'clave123', 'juan@example.com', 1),
    ('Maria', 'Gonzalez', 'Lopez', 'abc456', 'maria@example.com', 2);

INSERT INTO sucursales (nombre, estado, fecha_actualizacion, direccion, url, usuario_creador, fecha_creado, usuario_modificador, fecha_modificado, usuario_eliminador, fecha_eliminado, url_imagen) VALUES 
    ('Sucursal A', 'Online', CURRENT_DATE, 'Calle 123, Ciudad Toluca', 'www.url.com', 1, CURRENT_DATE, 1, CURRENT_DATE, 1, CURRENT_DATE, https://image.placeholder.co/insecure/w:640/quality:65/czM6Ly9jZG4uc3BhY2VyLnByb3BlcnRpZXMvYjZhYTU2YjUtN2RkMS00N2MwLTg4ZjYtNjUyOTlkODk0YmE2),
    ('Sucursal B', 'Offline', CURRENT_DATE, 'Avenida Principal, Ciudad Toluca', 'www.url.com', 1, CURRENT_DATE, 1, CURRENT_DATE, 1, CURRENT_DATE, https://image.placeholder.co/insecure/w:640/quality:65/czM6Ly9jZG4uc3BhY2VyLnByb3BlcnRpZXMvYjZhYTU2YjUtN2RkMS00N2MwLTg4ZjYtNjUyOTlkODk0YmE2),
    ('Sucursal C', 'Online', CURRENT_DATE, 'Calle 123, Ciudad Toluca', 'www.url.com', 1, CURRENT_DATE, 1, CURRENT_DATE, 1, CURRENT_DATE, https://image.placeholder.co/insecure/w:640/quality:65/czM6Ly9jZG4uc3BhY2VyLnByb3BlcnRpZXMvYjZhYTU2YjUtN2RkMS00N2MwLTg4ZjYtNjUyOTlkODk0YmE2),
    ('Sucursal D', 'Offline', CURRENT_DATE, 'Avenida Principal, Ciudad Toluca', 'www.url.com', 1, CURRENT_DATE, 1, CURRENT_DATE, 1, CURRENT_DATE, https://image.placeholder.co/insecure/w:640/quality:65/czM6Ly9jZG4uc3BhY2VyLnByb3BlcnRpZXMvYjZhYTU2YjUtN2RkMS00N2MwLTg4ZjYtNjUyOTlkODk0YmE2),
    ('Sucursal E', 'Online', CURRENT_DATE, 'Calle 123, Ciudad Toluca', 'www.url.com', 1, CURRENT_DATE, 1, CURRENT_DATE, 1, CURRENT_DATE, https://image.placeholder.co/insecure/w:640/quality:65/czM6Ly9jZG4uc3BhY2VyLnByb3BlcnRpZXMvYjZhYTU2YjUtN2RkMS00N2MwLTg4ZjYtNjUyOTlkODk0YmE2),
    ('Sucursal F', 'Online', CURRENT_DATE, 'Avenida Principal, Ciudad Toluca', 'www.url.com', 1, CURRENT_DATE, 1, CURRENT_DATE, 1, CURRENT_DATE, https://image.placeholder.co/insecure/w:640/quality:65/czM6Ly9jZG4uc3BhY2VyLnByb3BlcnRpZXMvYjZhYTU2YjUtN2RkMS00N2MwLTg4ZjYtNjUyOTlkODk0YmE2),

INSERT INTO sucursales_hist (id_sucursal, nombre, estado, fecha_actualizacion, direccion, url, usuario_invoucrado, tipo_accion, fecha) VALUES 
    (1, 'Sucursal A', 'Activo', CURRENT_DATE, 'Calle 123, Ciudad X', 'www.sucursalA.com', 1, 'Creación', CURRENT_DATE),
    (2, 'Sucursal B', 'Inactivo', CURRENT_DATE, 'Avenida Principal, Ciudad Y', 'www.sucursalB.com', 2, 'Creación', CURRENT_DATE);

INSERT INTO catalogo_general (nombre, descripcion, cantidad_total, precio, usuario_creador, fecha_creado) VALUES 
    ('Producto 1', 'Descripción del Producto 1', 100, 10.99, 1, CURRENT_DATE),
    ('Producto 2', 'Descripción del Producto 2', 50, 20.50, 2, CURRENT_DATE);

INSERT INTO catalogo_general_hist (id_producto, nombre, descripcion, cantidad_total, precio, usuario_invoucrado, tipo_accion, fecha) VALUES 
    (1, 'Producto 1', 'Descripción del Producto 1', 100, 10.99, 1, 'Creación', CURRENT_DATE),
    (2, 'Producto 2', 'Descripción del Producto 2', 50, 20.50, 2, 'Creación', CURRENT_DATE);

INSERT INTO inventario (id_sucursal, id_producto, cantidad) VALUES 
    (1, 1, 50),
    (2, 2, 25);

INSERT INTO clinicas (nombre, direccion) VALUES 
    ('Clínica X', 'Calle Principal, Ciudad Z'),
    ('Clínica Y', 'Avenida Secundaria, Ciudad W');

INSERT INTO catalogo_salidas (tipo) VALUES 
    ('Venta'),
    ('Traslado');

INSERT INTO movimientos (id_usuario, tipo_movimiento, sucursal_salida, sucursal_destino, id_tipo_salida, id_clinica, fecha, precio_total) VALUES 
    (1, 'Venta', 1, NULL, 1, NULL, CURRENT_DATE, 50.00),
    (2, 'Traslado', 2, 1, 2, 1, CURRENT_DATE, 100.00);

INSERT INTO detalle_movimiento (id_movimiento, id_producto, cantidad, precio) VALUES 
    (1, 1, 5, 10.00),
    (2, 2, 10, 20.00);

-->VISTAS
--vista_movimientos
CREATE VIEW vista_movimientos AS
 SELECT m.id_movimiento,                                                                 
     concat(u.nombre, ' ', u.apellido_paterno, ' ', u.apellido_materno) AS nombre_usuario,
     m.tipo_movimiento,                                                                   
     COALESCE(s_salida.nombre, 'N/A'::character varying) AS sucursal_salida,              
     COALESCE(s_destino.nombre, 'N/A'::character varying) AS sucursal_destino,            
     COALESCE(cs.tipo, 'N/A'::character varying) AS tipo_salida,                          
     COALESCE(c.nombre, 'N/A'::character varying) AS nombre_clinica,                      
     m.fecha,                                                                             
     m.precio_total                                                                       
    FROM (((((movimientos m                                                               
      LEFT JOIN usuario u ON ((m.id_usuario = u.id_usuario)))                             
      LEFT JOIN sucursales s_salida ON ((m.sucursal_salida = s_salida.id_sucursal)))      
      LEFT JOIN sucursales s_destino ON ((m.sucursal_destino = s_destino.id_sucursal)))   
      LEFT JOIN catalogo_salidas cs ON ((m.id_tipo_salida = cs.id_tipo_salida)))          
      LEFT JOIN clinicas c ON ((m.id_clinica = c.id_clinica)));
      
--vista_detalle_movimiento
CREATE VIEW vista_detalle_movimiento AS
SELECT dm.id_detalle_mov,                                                 
     m.id_movimiento,                                                       
     cg.nombre AS nombre_producto,                                          
     dm.cantidad,                                                           
     dm.precio                                                              
    FROM ((detalle_movimiento dm                                            
      JOIN movimientos m ON ((dm.id_movimiento = m.id_movimiento)))         
      LEFT JOIN catalogo_general cg ON ((dm.id_producto = cg.id_producto)));

CREATE OR REPLACE VIEW vista_detalle_movimiento AS
SELECT dm.id_detalle_mov,                                                 
     m.id_movimiento,                                                       
     dm.id_producto,
     cg.nombre AS nombre_producto,                                          
     dm.cantidad,                                                           
     dm.precio                                                              
    FROM ((detalle_movimiento dm                                            
      JOIN movimientos m ON ((dm.id_movimiento = m.id_movimiento)))         
      LEFT JOIN catalogo_general cg ON ((dm.id_producto = cg.id_producto)));

--vista_sincronizacion_pendiente_reciente   PARA VER REGISTROS MÁS ACTUALES POR SUCURSAL DE CADA PRODUCTO
CREATE OR REPLACE VIEW vista_sincronizacion_pendiente_reciente AS
SELECT 
    sp.id_producto, 
    sp.id_sucursal, 
    s.nombre AS nombre_sucursal,  
    sp.fecha_registro, 
    sp.estado,
    COALESCE(i.cantidad, 0) AS cantidad_existencia,
    s.url AS url_sucursal
FROM (
    SELECT 
        id_producto, 
        id_sucursal, 
        fecha_registro, 
        estado, 
        ROW_NUMBER() OVER (PARTITION BY id_producto, id_sucursal ORDER BY fecha_registro DESC) AS rn
    FROM sincronizacion_pendiente
) AS sp
JOIN sucursales s ON sp.id_sucursal = s.id_sucursal  
LEFT JOIN inventario i ON sp.id_producto = i.id_producto AND sp.id_sucursal = i.id_sucursal
WHERE sp.rn = 1;

--vista_catalogo_sincronizacion PARA VER DE CADA PRODUCTO INDIVIDUALMENTE SU INFO Y SI ESTÁ SYNC O NO
CREATE VIEW vista_catalogo_sincronizacion AS
SELECT
    cg.id_producto AS id_producto,
    cg.clave AS clave,
    cg.nombre AS nombre,
    cg.cantidad_total AS cantidad_total,
    cg.precio AS precio,
    CASE
        WHEN EXISTS (
            SELECT 1 FROM vista_sincronizacion_pendiente_reciente sp
            WHERE sp.id_producto = cg.id_producto
            AND sp.estado = 'PENDIENTE'
        ) THEN 'PENDIENTE'
        ELSE 'SINCRONIZADO'
    END AS sincronizacion
FROM
    catalogo_general cg;

--> vista_usuarios_desglose PARA VER EL USER Y SU ROL
CREATE VIEW vista_usuarios_desglose AS
SELECT 
    u.id_usuario,
    CONCAT(u.nombre, ' ', u.apellido_paterno, ' ', u.apellido_materno) AS nombre_completo,
    r.nombre AS nombre_rol
FROM 
    usuario u
JOIN 
    usuario_rol ur ON u.id_usuario = ur.id_usuario
JOIN 
    roles r ON ur.id_rol = r.id_rol
GROUP BY 
    u.id_usuario, u.nombre, u.apellido_paterno, u.apellido_materno, r.nombre;

--> vista_usuarios_privilegios PARA VER EL USER Y SU ROL CON PRIVILEGIOS
CREATE VIEW vista_usuarios_privilegios AS
SELECT 
    u.id_usuario,
    CONCAT(u.nombre, ' ', u.apellido_paterno, ' ', u.apellido_materno) AS nombre_completo,
    r.nombre AS nombre_rol,
    STRING_AGG(p.nombre, ', ') AS privilegios
FROM 
    usuario u
JOIN 
    usuario_rol ur ON u.id_usuario = ur.id_usuario
JOIN 
    roles r ON ur.id_rol = r.id_rol
LEFT JOIN 
    roles_privilegios rp ON r.id_rol = rp.id_rol
LEFT JOIN 
    privilegios p ON rp.id_privilegio = p.id_privilegio
GROUP BY 
    u.id_usuario, u.nombre, u.apellido_paterno, u.apellido_materno, r.nombre;

-->vista_roles_privilegios PARA CONOCER TODOS LOS PRIVILEGIOS QUE TIENE UN ROL
CREATE OR REPLACE VIEW vista_roles_privilegios AS
SELECT r.id_rol, r.nombre AS nombre_rol, p.id_privilegio, p.nombre AS nombre_privilegio
FROM roles r
JOIN roles_privilegios rp ON r.id_rol = rp.id_rol
JOIN privilegios p ON rp.id_privilegio = p.id_privilegio;

-->vista_usuario_detalle PARA LA TABLA DE CONTRASENAS
CREATE VIEW vista_usuario_detalle AS
SELECT 
    u.id_usuario,
    CONCAT_WS(' ', u.nombre, u.apellido_paterno, u.apellido_materno) AS nombre,
    u.correo,
    r.nombre AS rol,
    u.contrasena,
    u.status
FROM 
    usuario u
JOIN 
    roles r ON u.id_rol = r.id_rol;

--> MUESTRA TODAS LAS TABLAS DEL SISTEMA
SELECT table_name
FROM information_schema.tables
WHERE table_schema = 'public'
AND table_type = 'BASE TABLE';

-->MUESTRA TODAS LAS VISTAS
SELECT table_name
FROM information_schema.views
WHERE table_schema = 'public'; 

--> MUESTRA COLUMNAS DE UNA TABLA ESPECÍFICA
SELECT column_name, data_type
FROM information_schema.columns
WHERE table_schema = 'public' 
AND table_name = 'sincronizacion_pendiente';

--> MUESTRA TODOS LOS REGISTROS DE UNA TABLA
SELECT * FROM vista_catalogo_sincronizacion;

--> VER EL QUERY DE UNA VIEW
SELECT definition
FROM pg_views
WHERE viewname = 'vista_catalogo_sincronizacion_definitiva';

-->AGREGAR COLUMNA
ALTER TABLE roles
ADD COLUMN status INT;

-->COMANDOS NGROK
ngrok http 10395 --host-header="localhost:10395"
ngrok http 10394 --host-header="localhost:10394"

--> MODIFICAR UNA COLUMNA
ALTER TABLE sincronizacion_pendiente
ALTER COLUMN estado TYPE VARCHAR(200);

--> CAMBIAR FECHAS A +ZONA HORARIA
ALTER TABLE catalogo_general
   ALTER COLUMN fecha_creado SET DATA TYPE TIMESTAMP,
   ALTER COLUMN fecha_modificado SET DATA TYPE TIMESTAMP,
   ALTER COLUMN fecha_eliminado SET DATA TYPE TIMESTAMP;

--> PARA CAMBIAR NOMBRE DE COLUMNA
ALTER TABLE usuario
RENAME COLUMN contraseña TO contrasena;